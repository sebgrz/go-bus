// Code generated by MockGen. DO NOT EDIT.
// Source: service-bus.go

// Package mock_gobus is a generated GoMock package.
package mock_gobus

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	goeh "github.com/hetacode/go-eh"
)

// MockServiceBus is a mock of ServiceBus interface.
type MockServiceBus struct {
	ctrl     *gomock.Controller
	recorder *MockServiceBusMockRecorder
}

// MockServiceBusMockRecorder is the mock recorder for MockServiceBus.
type MockServiceBusMockRecorder struct {
	mock *MockServiceBus
}

// NewMockServiceBus creates a new mock instance.
func NewMockServiceBus(ctrl *gomock.Controller) *MockServiceBus {
	mock := &MockServiceBus{ctrl: ctrl}
	mock.recorder = &MockServiceBusMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServiceBus) EXPECT() *MockServiceBusMockRecorder {
	return m.recorder
}

// Consume mocks base method.
func (m *MockServiceBus) Consume() (<-chan goeh.Event, <-chan error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Consume")
	ret0, _ := ret[0].(<-chan goeh.Event)
	ret1, _ := ret[1].(<-chan error)
	return ret0, ret1
}

// Consume indicates an expected call of Consume.
func (mr *MockServiceBusMockRecorder) Consume() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Consume", reflect.TypeOf((*MockServiceBus)(nil).Consume))
}

// Publish mocks base method.
func (m *MockServiceBus) Publish(message goeh.Event) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Publish", message)
	ret0, _ := ret[0].(error)
	return ret0
}

// Publish indicates an expected call of Publish.
func (mr *MockServiceBusMockRecorder) Publish(message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Publish", reflect.TypeOf((*MockServiceBus)(nil).Publish), message)
}

// MockServiceBusLogger is a mock of ServiceBusLogger interface.
type MockServiceBusLogger struct {
	ctrl     *gomock.Controller
	recorder *MockServiceBusLoggerMockRecorder
}

// MockServiceBusLoggerMockRecorder is the mock recorder for MockServiceBusLogger.
type MockServiceBusLoggerMockRecorder struct {
	mock *MockServiceBusLogger
}

// NewMockServiceBusLogger creates a new mock instance.
func NewMockServiceBusLogger(ctrl *gomock.Controller) *MockServiceBusLogger {
	mock := &MockServiceBusLogger{ctrl: ctrl}
	mock.recorder = &MockServiceBusLoggerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServiceBusLogger) EXPECT() *MockServiceBusLoggerMockRecorder {
	return m.recorder
}

// Errorf mocks base method.
func (m *MockServiceBusLogger) Errorf(message string, args ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{message}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Errorf", varargs...)
}

// Errorf indicates an expected call of Errorf.
func (mr *MockServiceBusLoggerMockRecorder) Errorf(message interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{message}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Errorf", reflect.TypeOf((*MockServiceBusLogger)(nil).Errorf), varargs...)
}

// Infof mocks base method.
func (m *MockServiceBusLogger) Infof(message string, args ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{message}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Infof", varargs...)
}

// Infof indicates an expected call of Infof.
func (mr *MockServiceBusLoggerMockRecorder) Infof(message interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{message}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Infof", reflect.TypeOf((*MockServiceBusLogger)(nil).Infof), varargs...)
}
